summary: 'Create and read elections'
description: |
  A election is always at least linked to one user.
  You can create a new one or read the existing ones.
post:
  tags:
    - Elections
  summary: 'Create a new election'
  description: |
    Creates a new election with a link to the user of the API access token.
  security:
    - voturaBackendAuth: []
  operationId: 'createElection'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: './schemas.yaml#/components/schemas/electionCreateObject'
  responses:
    '201':
      description: |
        Created.
        The request was successfully executed.
        Successfully created a new election.
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/components/schemas/electionReadObject'
    '400':
      $ref: './../globals/responses.yaml#/components/responses/400'
    '401':
      $ref: './../globals/responses.yaml#/components/responses/401'
    '406':
      $ref: './../globals/responses.yaml#/components/responses/406'
    '415':
      $ref: './../globals/responses.yaml#/components/responses/415'
    '429':
      $ref: './../globals/responses.yaml#/components/responses/429'
    default:
      $ref: './../globals/responses.yaml#/components/responses/500'
get:
  tags:
    - Elections
  summary: 'Get all elections'
  description: |
    Returns all elections with the public information fields, that are linked to user of the API access token.
  security:
    - voturaBackendAuth: []
  operationId: 'getElections'
  parameters:
    - name: 'limit'
      in: 'query'
      description: |
        You can limit the number of returned items in the response array.
      required: false
      schema:
        type: 'integer'
        format: 'int8'
        minimum: 0
        maximum: 50
        example: 42
        default: 20
    - name: 'sortBy'
      in: 'query'
      description: |
        You can sort your response items by providing the key name to your field which you want to sort.
      required: false
      schema:
        type: 'string'
        enum:
          - name
          - votingStartAt
          - votingEndAt
          - createdAt
          - modifiedAt
        example: 'votingStartAt'
    - name: 'orderBy'
      in: 'query'
      description: |
        You can specify in which order you want to get your items.
        By default in `asc` (ascending) or when you wish `desc`(descending).
      # Currently I see no need for supporting multi-field sorting. If there is one, we need to update it.
      required: false
      schema:
        type: 'string'
        enum:
          - asc
          - desc
        example: 'asc'
  responses:
    '200':
      description: |
        OK.
        The request was successfully executed.
        Returns elections for the requested user.
      content:
        application/json:
          schema:
            type: 'array'
            minItems: 0
            maxItems: 50
            uniqueItems: true
            items:
              $ref: './schemas.yaml#/components/schemas/electionReadObject'
    '400':
      $ref: './../globals/responses.yaml#/components/responses/400'
    '401':
      $ref: './../globals/responses.yaml#/components/responses/401'
    '406':
      $ref: './../globals/responses.yaml#/components/responses/406'
    '429':
      $ref: './../globals/responses.yaml#/components/responses/429'
    default:
      $ref: './../globals/responses.yaml#/components/responses/500'
