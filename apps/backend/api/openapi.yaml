openapi: '3.1.0'
info:
  title: 'Votura backend HTTP-API definition'
  description: |
    ---
    This is the OpenAPI specification for the communication to the votura backend via the RESTfull-API.
    The votura frontend and backend communicate via this API.
  termsOfService: 'https://github.com/SE-UUlm/votura?tab=coc-ov-file'
  contact:
    name: 'Votura Dev-Team'
    # email: ''
    url: 'https://github.com/SE-UUlm/votura/discussions/categories/q-a'
  license:
    name: 'MIT'
    url: 'https://github.com/SE-UUlm/votura?tab=MIT-1-ov-file'
  version: '0.0.0'
externalDocs:
  url: 'https://se-uulm.github.io/votura/'
  description: 'The votura documentation'
servers:
  - url: 'http://localhost:{port}/api/v1'
    description: 'The default local development server.'
    variables:
      port:
        default: '5000'
        description: 'The port of the local development server, the votura backend.'
  - url: 'https://votura.informatik.uni-ulm.de/api/v1'
    description: 'The live bwCloud testing votura backend server'
  # - url: 'https://votura.com/api/v1'
  #   description: 'The live production votura backend server'
components:
  securitySchemes:
    voturaBackendAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        With this JWT access token the user can authenticate and authorize himself against the votura backend.
tags:
  - name: 'Elections'
    description: |
      Managing CRUD operations for elections.
  - name: 'Users'
    description: |
      Managing CRUD operations for user accounts and sessions.
  - name: 'BallotPapers'
    description: |
      Managing CRUD operations for ballot papers.
  - name: 'BallotPapersSections'
    description: |
      Managing CRUD operations for ballot paper sections.
  - name: 'Candidates'
    description: |
      Managing CRUD operations for candidates.
  - name: 'VoterGroups'
    description: |
      Managing CRUD operations for voter groups.

paths:
  /elections:
    $ref: './elections/elections.yaml'
  /elections/{electionId}:
    $ref: './elections/specificElection.yaml'
  /elections/{electionId}/freeze:
    $ref: './elections/freeze.yaml'
  /elections/{electionId}/unfreeze:
    $ref: './elections/unfreeze.yaml'
  /users/user:
    $ref: './users/user.yaml'
  /users/verifyEmail:
    $ref: './users/verifyEmail.yaml'
  /users/login:
    $ref: './users/login.yaml'
  /users/refreshTokens:
    $ref: './users/refreshTokens.yaml'
  /users/requestPasswordReset:
    $ref: './users/requestPasswordReset.yaml'
  /users/resetPassword:
    $ref: './users/resetPassword.yaml'
  /users/logout:
    $ref: './users/logout.yaml'
  /ballotPapers:
    $ref: './ballotPapers/ballotPapers.yaml'
  /ballotPapers/{ballotPaperId}:
    $ref: './ballotPapers/specificBallotPaper.yaml'
  /ballotPaperSections:
    $ref: './ballotPaperSections/ballotPaperSections.yaml'
  /ballotPaperSections/{ballotPaperSectionId}:
    $ref: './ballotPaperSections/specificBallotPaperSection.yaml'
  /candidates:
    $ref: './candidates/candidates.yaml'
  /candidates/{candidateId}:
    $ref: './candidates/specificCandidate.yaml'
  /voterGroups:
    $ref: './voterGroups/voterGroups.yaml'
  /voterGroups/{voterGroupId}:
    $ref: './voterGroups/specificVoterGroup.yaml'
  /voterGroups/{voterGroupId}/getVoterTokens:
    $ref: './voterGroups/voterTokens.yaml'
