/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface _PrismaMigrations {
  applied_steps_count: Generated<number>;
  checksum: string;
  finished_at: Timestamp | null;
  id: string;
  logs: string | null;
  migration_name: string;
  rolled_back_at: Timestamp | null;
  started_at: Generated<Timestamp>;
}

export interface AccessTokenBlacklist {
  accessTokenId: string;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp;
  id: string;
  modifiedAt: Timestamp;
}

export interface BallotPaper {
  createdAt: Generated<Timestamp>;
  description: string | null;
  electionId: string;
  id: string;
  maxVotes: number;
  maxVotesPerCandidate: number;
  modifiedAt: Timestamp;
  name: string;
}

export interface BallotPaperSection {
  ballotPaperId: string;
  createdAt: Generated<Timestamp>;
  description: string | null;
  id: string;
  maxVotes: number;
  maxVotesPerCandidate: number;
  modifiedAt: Timestamp;
  name: string;
}

export interface BallotPaperSectionCandidate {
  ballotPaperSectionId: string;
  candidateId: string;
  createdAt: Generated<Timestamp>;
  id: string;
  modifiedAt: Timestamp;
}

export interface Candidate {
  createdAt: Generated<Timestamp>;
  description: string | null;
  electionId: string;
  id: string;
  modifiedAt: Timestamp;
  title: string;
}

export interface Election {
  allowInvalidVotes: Generated<boolean>;
  configFrozen: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  description: string | null;
  electionCreatorId: string;
  generator: Numeric | null;
  id: string;
  modifiedAt: Timestamp;
  name: string;
  primeP: Numeric | null;
  primeQ: Numeric | null;
  privKey: Numeric | null;
  pubKey: Numeric | null;
  votingEndAt: Timestamp;
  votingStartAt: Timestamp;
}

export interface User {
  createdAt: Generated<Timestamp>;
  email: string;
  emailVerificationTokenExpiresAt: Timestamp | null;
  emailVerificationTokenHash: string | null;
  id: string;
  modifiedAt: Timestamp;
  passwordHash: string;
  passwordResetTokenExpiresAt: Timestamp | null;
  passwordResetTokenHash: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  refreshTokenHash: string | null;
  verified: Generated<boolean>;
}

export interface Voter {
  createdAt: Generated<Timestamp>;
  id: string;
  modifiedAt: Timestamp;
  voterGroupId: string;
}

export interface VoterGroup {
  createdAt: Generated<Timestamp>;
  description: string | null;
  id: string;
  modifiedAt: Timestamp;
  name: string;
  privKey: string | null;
  pubKey: string | null;
  voterTokensGenerated: Generated<boolean>;
}

export interface VoterRegister {
  ballotPaperId: string;
  createdAt: Generated<Timestamp>;
  id: string;
  modifiedAt: Timestamp;
  voted: Generated<boolean>;
  voterId: string;
}

export interface DB {
  _prisma_migrations: _PrismaMigrations;
  AccessTokenBlacklist: AccessTokenBlacklist;
  BallotPaper: BallotPaper;
  BallotPaperSection: BallotPaperSection;
  BallotPaperSectionCandidate: BallotPaperSectionCandidate;
  Candidate: Candidate;
  Election: Election;
  User: User;
  Voter: Voter;
  VoterGroup: VoterGroup;
  VoterRegister: VoterRegister;
}
