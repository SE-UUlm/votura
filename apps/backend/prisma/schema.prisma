// Good starting point for developing with prisma:
// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-postgresql

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// This generator is used to generate an ERD (Entity Relationship Diagram) from the Prisma schema for the documentation.
generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../../docs/static/uml/dataModel_live.md"
  theme                     = "neutral"
  tableOnly                 = false
  ignoreEnums               = false
  includeRelationFromFields = true
  disableEmoji              = false
  disabled                  = false // Set to true to disable the generator
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String     @id @default(uuid()) @db.Uuid
  createdAt                       DateTime   @default(now()) @db.Timestamptz(6) // UTC
  modifiedAt                      DateTime   @updatedAt @db.Timestamptz(6)
  email                           String     @unique
  passwordHash                    String
  verified                        Boolean    @default(false)
  // lastLoginAt DateTime? @db.Timestamptz(6) // Should be implemented with #123
  // failedLoginAttempts Int? @default(0)
  emailVerificationTokenHash      String?
  emailVerificationTokenExpiresAt DateTime?  @db.Timestamptz(6)
  passwordResetTokenHash          String?
  passwordResetTokenExpiresAt     DateTime?  @db.Timestamptz(6)
  refreshTokenHash                String?
  refreshTokenExpiresAt           DateTime?  @db.Timestamptz(6)
  elections                       Election[]
}

model AccessTokenBlacklist {
  id            String   @id @default(uuid()) @db.Uuid
  accessTokenId String   @unique @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  modifiedAt    DateTime @updatedAt @db.Timestamptz(6)
  expiresAt     DateTime @db.Timestamptz(6)
}

model Election {
  id                      String                  @id @default(uuid()) @db.Uuid
  createdAt               DateTime                @default(now()) @db.Timestamptz(6)
  modifiedAt              DateTime                @updatedAt @db.Timestamptz(6)
  name                    String
  description             String?
  votingStartAt           DateTime                @db.Timestamptz(6)
  votingEndAt             DateTime                @db.Timestamptz(6)
  configFrozen            Boolean                 @default(false)
  allowInvalidVotes       Boolean                 @default(false)
  pubKey                  Unsupported("NUMERIC")?
  privKey                 Unsupported("NUMERIC")?
  primeP                  Unsupported("NUMERIC")?
  primeQ                  Unsupported("NUMERIC")?
  generator               Unsupported("NUMERIC")?
  electionCreatorId       String                  @db.Uuid
  electionCreatorRelation User                    @relation(fields: [electionCreatorId], references: [id])
  ballotPapers            BallotPaper[]
  Candidates              Candidate[]
}

model BallotPaper {
  id                   String               @id @default(uuid()) @db.Uuid
  createdAt            DateTime             @default(now()) @db.Timestamptz(6)
  modifiedAt           DateTime             @updatedAt @db.Timestamptz(6)
  name                 String
  description          String?
  maxVotes             Int
  maxVotesPerCandidate Int
  electionId           String               @db.Uuid
  electionRelation     Election             @relation(fields: [electionId], references: [id])
  BallotPaperSection   BallotPaperSection[]
}

model BallotPaperSection {
  id                           String                        @id @default(uuid()) @db.Uuid
  createdAt                    DateTime                      @default(now()) @db.Timestamptz(6)
  modifiedAt                   DateTime                      @updatedAt @db.Timestamptz(6)
  name                         String
  description                  String?
  maxVotes                     Int
  maxVotesPerCandidate         Int
  ballotPaperId                String                        @db.Uuid
  ballotPaperRelation          BallotPaper                   @relation(fields: [ballotPaperId], references: [id])
  BallotPaperSectionCandidates BallotPaperSectionCandidate[]
}

model BallotPaperSectionCandidate {
  id                         String             @id @default(uuid()) @db.Uuid
  ballotPaperSectionId       String             @db.Uuid
  ballotPaperSectionRelation BallotPaperSection @relation(fields: [ballotPaperSectionId], references: [id])
  candidateId                String             @db.Uuid
  candidateRelation          Candidate          @relation(fields: [candidateId], references: [id])
  createdAt                  DateTime           @default(now()) @db.Timestamptz(6)
  modifiedAt                 DateTime           @updatedAt @db.Timestamptz(6)
}

model Candidate {
  id                           String                        @id @default(uuid()) @db.Uuid
  createdAt                    DateTime                      @default(now()) @db.Timestamptz(6)
  modifiedAt                   DateTime                      @updatedAt @db.Timestamptz(6)
  title                        String
  description                  String?
  electionId                   String                        @db.Uuid
  electionRelation             Election                      @relation(fields: [electionId], references: [id])
  BallotPaperSectionCandidates BallotPaperSectionCandidate[]
}
