@startuml dataModel

entity "user" as user {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * email : bpchar(255) <<UK>>
    * pwHash : bpchar(255)
    * verified : boolean
    lastLoginAt : timestamp | NULL
    ' failed login attempts get reset on successful login
    * failedLoginAttempts : smallint
    '* isAdmin : boolean
    emailVerificationTokenHash : bpchar(64) | NULL
    emailVerificationTokenExpiresAt : timestamp | NULL
    passwordResetTokenHash : bpchar(64) | NULL
    passwordResetTokenExpiresAt : timestamp | NULL
    passwordResetTokenUsedAt : timestamp | NULL
    refreshTokenHash : bpchar(64) | NULL
    refreshTokenExpiresAt : timestamp | NULL
    refreshTokenRevokedAt : timestamp | NULL
    --
}

entity "jwtBlacklist" as jwtBlacklist {
    ' this table is used to store blacklisted access tokens
    ' The jti is 36 characters long if we use UUIDv4
    * jti : varchar(36) <<PK>>
    --
    * expiresAt : timestamp
    * blacklistedAt : timestamp
    --
}



entity "elections" as elections {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * private : boolean
    * votingStart : date
    * votingEnd : date
    * configFrozen : boolean
    * allowInvalidVote : boolean
    ' Is there a use case for `votesCounted`?
    ' * votesCounted : boolean
    ' Computed values such as validVotes and invalidVotes are critical - do we really want to store them?
    ' validVotes : integer | NULL
    ' invalidVotes : integer | NULL
    pubKeyVotes : NUMERIC | NULL
    privKeyVotes : NUMERIC | NULL
    primeP : NUMERIC | NULL
    primeQ : NUMERIC | NULL
    generator : NUMERIC | NULL
    --
    * electionCreator : user.email <<FK>>
}

note as N2
The result of one election is intended 
to be a singular decision, we 
do not support multiple questions 
(e.g. Vote for Admin and Vote for Treasurer) 
in one election.
end note

entity "ballotPapers" as ballotPapers {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * maxVotes : smallint
    * maxVotesPerCandidate : smallint
    --
    * election : election.id <<FK>>
}

entity "ballotPaperSections" as ballotPaperSections {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * maxVotes : smallint
    * maxVotesPerCandidate : smallint
    --
    * ballotPaper : ballotPaper.id <<FK>>
}
' note as C_2
' If at least two ballotPaperSections are created for one ballotPaper, 
' the name field of the ballotPaperSections is mandatory.
' end note

entity "ballotPaperSectionCandidates" as ballotPaperSectionCandidates {
    * ballotPaperSection : ballotPaperSection.id <<PK>> <<FK>>
    * candidate : candidate.id <<PK>> <<FK>>
    --
    * created : timestamp
    * modified : timestamp
    --
}

entity "candidates" as candidates {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * title : bpchar(255)
    description : bpchar | NULL
    --
    * election : election.id <<FK>>
}

entity "votes" as votes {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    alpha : NUMERIC | NULL
    beta : NUMERIC | NULL
    commitmentPart1 : NUMERIC | NULL
    commitmentPart2 : NUMERIC | NULL
    challenge : NUMERIC | NULL
    response : NUMERIC | NULL
    --
    * election : election.id <<FK>>
    ' if the vote isn't secret, voter can be saved
    voter : voter.id <<FK>> | NULL
}
note as N4
A vote is an encoded json object containing the entire filled in ballot paper.
end note

entity "voterRegisters" as voterRegisters {
    * ballotPaper : ballotPaper.id <<PK>> <<FK>>
    * voter : voter.id <<PK>> <<FK>>
    --
    * created : timestamp
    * modified : timestamp
    * voted : boolean
}

entity "voters" as voters {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    --
    voterGroup: voterGroup.id <<FK>>
}
note as N3
A voter can only get one ballot paper,
and with this one vote per election.
end note

entity "voterGroups" as voterGroups {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    pubKeyRS256 : NUMERIC | NULL
    privKeyRS256 : NUMERIC | NULL
    moduloRS256 : NUMERIC | NULL
    --
}

user ||--o{ elections
elections ||--o{ ballotPapers
elections -- N2
elections ||--o{ candidates
ballotPapers ||--o{ voterRegisters
voterRegisters }o--|| voters
ballotPapers ||--o{ ballotPaperSections
' ballotPaperSections -- C_2
ballotPaperSections ||--o{ ballotPaperSectionCandidates
ballotPaperSectionCandidates }o--|| candidates
votes }o--|| elections
voters |o--o{ votes
voterGroups ||--o{ voters
voters -- N3
votes -- N4


@enduml