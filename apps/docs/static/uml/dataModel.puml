@startuml dataModel

entity "elections" as elections {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * votingStart : date
    * votingEnd : date
    * freezeConfig : boolean
    * allowInvalidVote : boolean
    * votesCounted : boolean
    ' Computed values such as validVotes and invalidVotes are critical - do we really want to store them?
    validVotes : integer | NULL
    invalidVotes : integer | NULL
    * pubKeyVotes : NUMERIC
    * privKeyVotes : NUMERIC
    * prime_p : NUMERIC 
    * prime_q : NUMERIC
    * generator : NUMERIC
    * pubKeyRS256 : NUMERIC
    * privKeyRS256 : NUMERIC
    * moduloRS256 : NUMERIC
    --
}

note as N2
The result of one election is intended 
to be a singular decision, we 
do not support multiple questions 
(e.g. Vote for Admin and Vote for Treasurer) 
in one election.
end note

entity "ballotPapers" as ballotPapers {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * maxVotes : smallint
    * maxVotesPerCandidate : smallint
    --
    * election : election.id <<FK>>
}

entity "ballotPaperSections" as ballotPaperSections {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * name : bpchar(255)
    description : bpchar | NULL
    * maxVotes : smallint
    * maxVotesPerCandidate : smallint
    --
    * ballotPaper : ballotPaper.id <<FK>>
}
' note as C_2
' If at least two ballotPaperSections are created for one ballotPaper, 
' the name field of the ballotPaperSections is mandatory.
' end note

entity "ballotPaperSectionCandidates" as ballotPaperSectionCandidates {
    * ballotPaperSection : ballotPaperSection.id <<PK>> <<FK>>
    * candidate : candidate.id <<PK>> <<FK>>
    --
    * created : timestamp
    * modified : timestamp
    --
}

entity "candidates" as candidates {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * title : bpchar(255)
    description : bpchar | NULL
    --
    * election : election.id <<FK>>
}

entity "votes" as votes {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    * alpha : NUMERIC | NULL
    * beta : NUMERIC | NULL
    * commitment_part1 : NUMERIC | NULL
    * commitment_part2 : NUMERIC | NULL
    * challenge : NUMERIC | NULL
    * response : NUMERIC | NULL
    --
    * election : election.id <<FK>>
    ' if the vote isn't secret, voter can be saved
    voter : voter.id <<FK>> | NULL
}
note as N4
A vote is an encoded json object containing the entire filled in ballot paper.
end note

entity "voterRegisters" as voterRegisters {
    * ballotPaper : ballotPaper.id <<PK>> <<FK>>
    * voter : voter.id <<PK>> <<FK>>
    --
    * created : timestamp
    * modified : timestamp
    * voted : boolean
}

entity "voters" as voters {
    * id : uuid <<PK>>
    --
    * created : timestamp
    * modified : timestamp
    --
}
note as N3
A voter can only get one ballot paper,
and with this one vote per election.
end note


elections ||--o{ ballotPapers
elections -- N2
elections ||--o{ candidates
ballotPapers ||--o{ voterRegisters
voterRegisters }o--|| voters
ballotPapers ||--o{ ballotPaperSections
' ballotPaperSections -- C_2
ballotPaperSections ||--o{ ballotPaperSectionCandidates
ballotPaperSectionCandidates }o--|| candidates
votes }o--|| elections
voters |o--o{ votes
voters -- N3
votes -- N4



@enduml